#Check for BST
Given the root of a binary tree. Check whether it is a BST or not.
Note: We are considering that BSTs can not contain duplicate Nodes.
A BST is defined as follows:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.
Examples:

Input: root = [2, 1, 3, N, N, N, 5]


Output: true 
Explanation: The left subtree of every node contains smaller keys and right subtree of every node contains greater keys. Hence, the tree is a BST.

TC:O(n) SC: O(n) 
class Solution {
    // Function to check whether a Binary Tree is BST or not.
    public void inOrder(Node root, List<Integer> h){
        if(root==null) return;
        //LNR
        inOrder(root.left,h);
        h.add(root.data);
        inOrder(root.right,h);
    }
    
    boolean isBST(Node root) {
        // code here.
        List<Integer> h = new ArrayList<>();
        inOrder(root,h);
        for(int i=1;i<h.size();i++){
            if(h.get(i)<=h.get(i-1)){
                return false;
            }
        }
        return true;
    }
}



************************************* OPTIMIZED CODE ************************************************
TC:O(n) SC:O(h) 
class Solution {
    private Integer prev = null;

    boolean isBST(Node root) {
        return isBSTUtil(root);
    }

    private boolean isBSTUtil(Node node) {
        if (node == null) return true;

        // Check the left subtree
        if (!isBSTUtil(node.left)) return false;

        // Check BST property for current node
        if (prev != null && node.data <= prev) return false;
        prev = node.data;

        // Check the right subtree
        return isBSTUtil(node.right);
    }
}
