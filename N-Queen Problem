#N-Queen Problem

The n-queens puzzle is the problem of placing n queens on a (n Ã— n) chessboard such that no two queens can attack each other. Note that two queens attack each other if they are placed on the same row, the same column, or the same diagonal.

Given an integer n, find all distinct solutions to the n-queens puzzle.
You can return your answer in any order but each solution should represent a distinct board configuration of the queen placements, where the solutions are represented as permutations of [1, 2, 3, ..., n]. In this representation, the number in the ith position denotes the row in which the queen is placed in the ith column.
For eg. below figure represents a chessboard [3 1 4 2].

Examples:

Input: n = 1
Output: [1]
Explaination: Only one queen can be placed in the single cell available.

Input: n = 4
Output: [[2 4 1 3 ] [3 1 4 2 ]]
Explaination: There are 2 possible solutions for n = 4.

TC:O(N!) SC:O(N!)  
class Solution {
    // recursive function to solve the N-queens problemms 
    public void solve(int colo, int n, ArrayList<ArrayList<Integer>> ans, ArrayList<Integer> sol, boolean[]col, boolean []ldiag, boolean[]rdiag){
        //if all queens are placed, add solution to answer list 
        if(colo==n){
            ans.add(new ArrayList<>(sol));
            return ;
        }
        // try placing a queen in each row of the current coloumn 
        for(int i=0;i<n;i++){
            //check if placing queen at (colo , i) is safe
            if(!col[i] && !ldiag[colo-i+n-1] && !rdiag[i+colo]){
                //placed the queen 
                sol.add(i+1);
                col[i]=true;
                ldiag[colo-i+n-1]=true;
                rdiag[i+colo]=true;
                // recur to place the rest of the queens 
                solve(colo+1,n,ans,sol,col,ldiag,rdiag);
                //backtraking : remove the queen and try next position 
                sol.remove(sol.size()-1);
                col[i]=false;
                ldiag[colo-i+n-1]=false;
                rdiag[i+colo]=false;
            }
        }
    }
    
    
    public ArrayList<ArrayList<Integer>> nQueen(int n) {
        // code here
        //arrays to track coloumn and diagonal attacks
        boolean[]col=new boolean[n];
        boolean[] ldiag=new boolean[2*n-1]; //left diagonal 
        boolean[] rdiag=new boolean[2*n-1]; //right diagonal 
        
        ArrayList<ArrayList<Integer>> ans = new ArrayList<>(); // store the all valdiation 
        ArrayList<Integer> sol = new ArrayList<>(); // stores the current solution
        //start solving from the first coloumn 
        
        solve(0,n,ans,sol,col,ldiag,rdiag);
        return ans;
    }
}
