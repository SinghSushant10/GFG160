#Product array puzzle
Given an array, arr[] construct a product array, res[] where each element in res[i] is the product of all elements in arr[] except arr[i]. Return this resultant array, res[].
Note: Each element is res[] lies inside the 32-bit integer range.
Examples:
Input: arr[] = [10, 3, 5, 6, 2]
Output: [180, 600, 360, 300, 900]
Explanation: For i=0, res[i] = 3 * 5 * 6 * 2 is 180.
For i = 1, res[i] = 10 * 5 * 6 * 2 is 600.
For i = 2, res[i] = 10 * 3 * 6 * 2 is 360.
For i = 3, res[i] = 10 * 3 * 5 * 2 is 300.
For i = 4, res[i] = 10 * 3 * 5 * 6 is 900.
************************************BRUTE FORCE **************************************
TC:O(n) SC:O(1)
class Solution {
    public static int[] productExceptSelf(int arr[]) {
        // code here
        int n=arr.length;
        int[]res=new int[n];
        for(int i=0;i<n;i++){
            int prod=1;
            for(int j=0;j<n;j++){
                if(i!=j){
                    prod*=arr[j];
                }
            }
            res[i]=prod;
        }
        return res;
    }
}
************************************ OPTIMIZED CODE  **************************************
TC:O(n) SC:O(n)
class Solution {
    public static int[] productExceptSelf(int arr[]) {
        // code here
       int n=arr.length;
       int[]ans = new int [n];
       Arrays.fill(ans,1); // initialize with 1 
       //left product 
       int left=1;
       for(int i=0;i<n;i++){
           ans[i]=left;
           left*=arr[i];
       }
       //right product 
       int right=1;
       for(int i=n-1;i>=0;i--){
           ans[i]*=right;
           right*=arr[i];
       }
       return ans;
    }
}

