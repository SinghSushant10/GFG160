#Count Inversions
Given an array of integers arr[]. Find the Inversion Count in the array.
Two elements arr[i] and arr[j] form an inversion if arr[i] > arr[j] and i < j.
Inversion Count: For an array, inversion count indicates how far (or close) the array is from being sorted. If the array is already sorted then the inversion count is 0.
If an array is sorted in the reverse order then the inversion count is the maximum. 
Examples:
Input: arr[] = [2, 4, 1, 3, 5]
Output: 3
Explanation: The sequence 2, 4, 1, 3, 5 has three inversions (2, 1), (4, 1), (4, 3).

TC:O(nlogn) SC:O(n)


class Solution {
    // Merging two halves and counting inversions
    static int merge(int[] arr, int[] temp, int left, int mid, int right) {
        int count = 0;
        int i = left, j = mid + 1, k = left;

        while (i <= mid && j <= right) {
            if (arr[i] <= arr[j]) {
                temp[k++] = arr[i++];
            } else {
                count += (mid - i + 1); // Count inversions
                temp[k++] = arr[j++];
            }
        }

        while (i <= mid) temp[k++] = arr[i++]; // Copy remaining elements
        while (j <= right) temp[k++] = arr[j++];

        // Copy back to the original array
        for (i = left; i <= right; i++) {
            arr[i] = temp[i];
        }
        return count;
    }

    // Merge sort to count inversions
    static int mergeSort(int[] arr, int[] temp, int left, int right) {
        if (left >= right) return 0; // Base case
        int mid = left + (right - left) / 2;
        int count = 0;

        count += mergeSort(arr, temp, left, mid);       // Count in left half
        count += mergeSort(arr, temp, mid + 1, right); // Count in right half
        count += merge(arr, temp, left, mid, right);   // Count split inversions

        return count;
    }

    // Function to count inversions in the array
    static int inversionCount(int[] arr) {
        int n = arr.length;
        int[] temp = new int[n]; // Single temp array for efficiency
        return mergeSort(arr, temp, 0, n - 1);
    }
}
