#Subarrays with sum K
Given an unsorted array of integers, find the number of continuous subarrays having sum exactly equal to a given number k.
Examples:
Input: arr = [10, 2, -2, -20, 10], k = -10
Output: 3
Explaination: Subarrays: arr[0...3], arr[1...4], arr[3...4] have sum exactly equal to -10.

TC:O(n) SC:O(n)
class Solution {
    public int countSubarrays(int arr[], int k) {
        // code here
        int ans = 0 , sum=0;
        HashMap<Integer,Integer> map = new HashMap<>();
        
        for(int x:arr){
            sum+=x ;
// Check if there exists a prefix sum `sum-k` in the HashMap
// If it does, it means there are subarrays ending at the current index
// that have a sum equal to `k`
            if(sum==k) ans++;
            ans+=map.getOrDefault(sum-k,0);
 // Update the frequency of the current prefix sum in the HashMap
            map.put(sum,map.getOrDefault(sum,0)+1);
        }
        return ans;
    }
}
