#Inorder Traversa
Given a Binary Tree, your task is to return its In-Order Traversal.

An inorder traversal first visits the left child (including its entire subtree), then visits the node, and finally visits the right child (including its entire subtree).

Follow Up: Try solving this with O(1) auxiliary space.

Examples:

Input: root[] = [1, 2, 3, 4, 5] 
      
Output: [4, 2, 5, 1, 3]
Explanation: The in-order traversal of the given binary tree is [4, 2, 5, 1, 3].

TC:O(n) SC:O(n)
class Solution {
    // Function to return a list containing the inorder traversal of the tree.
    
    public void inOrder(Node root, ArrayList<Integer> result){
        if(root==null) return;
        inOrder(root.left,result);
        result.add(root.data);
        inOrder(root.right,result);
    }
    ArrayList<Integer> inOrder(Node root) {
        // Code
        ArrayList<Integer> result = new ArrayList<>();
        inOrder(root,result);
        return result;
    }
}
