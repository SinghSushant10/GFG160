#Lowest Common Ancestor in a BST

Given a Binary Search Tree (with all values unique) and two nodes n1 and n2 (n1 != n2). You may assume that both nodes exist in the tree. Find the Lowest Common Ancestor (LCA) of the given two nodes in the BST.

LCA between two nodes n1 and n2 is defined as the lowest node that has both n1 and n2 as descendants (where we allow a node to be a descendant of itself).

Examples:

Input: root = [5, 4, 6, 3, N, N, 7, N, N, N, 8], n1 = 7, n2 = 8
        
Output: 7
Explanation: 7 is the closest node to both 7 and 8, which is also an ancestor of both the nodes.

TC:O(h) O(1) 
class Solution {
    Node LCA(Node root, Node n1, Node n2) {
        if (root == null) return null; // Base case

        // If both nodes are smaller, LCA is in the left subtree
        if (n1.data < root.data && n2.data < root.data)
            return LCA(root.left, n1, n2);

        // If both nodes are greater, LCA is in the right subtree
        if (n1.data > root.data && n2.data > root.data)
            return LCA(root.right, n1, n2);

        // If one is on the left and the other on the right, root is the LCA
        return root;
    }
}
