#Non-overlapping Intervals
Given a 2D array intervals[][] of representing intervals where intervals [i] = [starti, endi ]. Return the minimum number of intervals you need 
to remove to make the rest of the intervals non-overlapping.
Examples:
Input: intervals[][] = [[1, 2], [2, 3], [3, 4], [1, 3]]
Output: 1
Explanation: [1, 3] can be removed and the rest of the intervals are non-overlapping.

// Time Complexity:- O(NLogN)
// Space Complexity:- O(1)

class Solution {
    static int minRemoval(int intervals[][]) {
        // code here
        // Sort the intervals based on their ending time
        Arrays.sort(intervals,(a,b)->Integer.compare(a[1],b[1]));
        int last=0, ans=0, n = intervals.length;
        for(int i=1 ; i<n; i++){
             // If the start of the current interval is less than the end of the last selected interval
             // it means the current interval overlaps with the last interval.
            if(intervals[i][0]<intervals[last][1]){
                ans++;
            }
            else{  // If there's no overlap, update 'last' to the current interval.
                last=i;
            }
        }
        return ans;
    }
}
