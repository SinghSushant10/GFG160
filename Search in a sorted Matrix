#Search in a sorted Matrix
Given a strictly sorted 2D matrix mat[][] of size n x m and a number x. Find whether the number x is present in the matrix or not.
Note: In a strictly sorted matrix, each row is sorted in strictly increasing order, and the first element of the ith row (i!=0) is greater than the last element of the (i-1)th row.

Examples:

Input: mat[][] = [[1, 5, 9], [14, 20, 21], [30, 34, 43]], x = 14
Output: true
Explanation: 14 is present in the matrix, so output is true.


TC:O(log(n*m)) SC:O(1)
class Solution {
    // Function to search a given number in row-column sorted matrix.
    public boolean searchMatrix(int[][] mat, int x) {
        // code here
        int n = mat.length;    // Number of rows
        int m = mat[0].length; // Number of columns 
   // Treat the matrix as a flattened 1D array for binary search     
        int low=0 , high=n*m-1 , mid=0;
        while(low<=high){
            mid=low+(high-low)/2;
            
 // Derive the row and column indices from the middle index.
            int row= mid/m;   // Row index in the matrix
            int col= mid%m;  // Column index in the matrix
            if(mat[row][col]==x) return true;
            else if(mat[row][col]<x) low=mid+1;
            else high=mid-1;
        }
        return false;
    }
}
