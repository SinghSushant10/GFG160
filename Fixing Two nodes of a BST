#Fixing Two nodes of a BST
Given the root of a Binary search tree(BST), where exactly two nodes were swapped by mistake. Your task is to fix (or correct) the BST by swapping them back. Do not change the structure of the tree.
Note: It is guaranteed that the given input will form BST, except for 2 nodes that will be wrong. All changes must be reflected in the original Binary search tree(BST).
 
Examples :
Input: root = [10, 5, 8, 2, 20]
     
Output: 1
Explanation: The nodes 20 and 8 were swapped. 

TC:O(n) SC:O(h) 
class Solution {
    Node first, middle, last, prev;
    
    void correctBST(Node root) {
        first = middle = last = prev = null;
        
        // Perform inorder traversal and find the misplaced nodes
        inorder(root);
        
        // Case 1: Swapped nodes are not adjacent
        if (first != null && last != null) {
            swap(first, last);
        } 
        // Case 2: Swapped nodes are adjacent
        else if (first != null && middle != null) {
            swap(first, middle);
        }
    }
    
    // Inorder traversal to identify misplaced nodes
    void inorder(Node root) {
        if (root == null) return;

        inorder(root.left);
        
        if (prev != null && root.data < prev.data) {
            if (first == null) {
                first = prev;  // First incorrect node
                middle = root; // Potential second incorrect node
            } else {
                last = root;  // Second incorrect node in non-adjacent case
            }
        }
        
        prev = root; // Update prev node
        
        inorder(root.right);
    }
    
    // Swap function to fix the misplaced nodes
    void swap(Node a, Node b) {
        int temp = a.data;
        a.data = b.data;
        b.data = temp;
    }
}
