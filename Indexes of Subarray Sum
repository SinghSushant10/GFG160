#Indexes of Subarray Sum
Given an array arr[] containing only non-negative integers, your task is to find a continuous subarray (a contiguous sequence of elements) whose sum equals a specified value target.
You need to return the 1-based indices of the leftmost and rightmost elements of this subarray. You need to find the first subarray whose sum is equal to the target.
Note: If no such array is possible then, return [-1].
Examples:
Input: arr[] = [1, 2, 3, 7, 5], target = 12
Output: [2, 4]
Explanation: The sum of elements from 2nd to 4th position is 12.

************************************ BRUTE FORCE *******************************************
TC:O(n*2) SC:O(1) 
class Solution {
    static ArrayList<Integer> subarraySum(int[] arr, int target) {
        // code here
        ArrayList<Integer> ans = new ArrayList<>();
     
        for(int i=0;i<arr.length;i++){
               int currSum=0;
            for(int j=i;j<arr.length;j++){
                 currSum+=arr[j];
                if(currSum==target) {
                    ans.add(i+1);
                    ans.add(j+1);
                    return ans;
               
                }
            }
       }
         ans.add(-1);
         return ans;
    }
}

************************************ Two Pointer Approach *******************************************
TC:O(n) SC:O(1)
class Solution {
    static ArrayList<Integer> subarraySum(int[] arr, int target) {
        // code here
      ArrayList<Integer> ans = new ArrayList<>();
      int j=0, sum=0;
      for(int i=0;i<arr.length;i++){   //O(n) + O(n) =2O(n)
          sum+=arr[i];
          while(sum>target && j<i){
              sum-=arr[j];
              j++;
          }
          if(sum==target){
              ans.add(j+1);
              ans.add(i+1);
              return ans;
          }
      }
      ans.add(-1);
      return ans;
    }
}


