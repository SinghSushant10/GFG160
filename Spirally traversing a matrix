#Spirally traversing a matrix
You are given a rectangular matrix mat[][] of size n x m, and your task is to return an array while traversing the matrix in spiral form.
Examples:
Input: mat[][] = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]
Output: [1, 2, 3, 4, 8, 12, 16, 15, 14, 13, 9, 5, 6, 7, 11, 10]

TC: O(n×m) SC: O(n×m)
class Solution {
    // Function to return a list of integers denoting spiral traversal of matrix.
    public ArrayList<Integer> spirallyTraverse(int mat[][]) {
        // code here
        ArrayList<Integer> result = new ArrayList<>();
        if(mat == null || mat.length ==0) return result ;
        int n = mat.length;  //no of rows 
        int m = mat[0].length; // no of columns 
    // top -> row start, left -> col start, bottom-> row end, right-> col end
        int top=0, bottom=n-1 , left=0,right=m-1;
        while(top<=bottom && left<=right){
             // Traverse from left to right along the top row.
            for(int i=left ;i<=right;i++){
                result.add(mat[top][i]);
            }
            top++;
             // Traverse from top to bottom along the right column.
            for(int i=top;i<=bottom;i++){
                result.add(mat[i][right]);
            }
            right--;
            // Check if there are rows remaining to traverse.
            if(top<=bottom){
              // Traverse from right to left along the bottom row.
              for(int i=right;i>=left ;i--){
                  result.add(mat[bottom][i]);
              }
              bottom--;
            }
             // Check if there are columns remaining to traverse.
             if(left<=right){
               // Traverse from bottom to top along the left column. 
               for(int i=bottom;i>=top;i--){
                   result.add(mat[i][left]);
               }
               left++;
             }
        }
        return result;
    }
}
