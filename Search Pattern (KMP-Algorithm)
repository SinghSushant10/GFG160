#Search Pattern (KMP-Algorithm)
Given two strings, one is a text string txt and the other is a pattern string pat. The task is to print the indexes of all the occurrences of the
pattern string in the text string. Use 0-based indexing while returning the indices. 
Note: Return an empty list in case of no occurrences of pattern.
Examples :

Input: txt = "abcab", pat = "ab"
Output: [0, 3]
Explanation: The string "ab" occurs twice in txt, one starts at index 0 and the other at index 3. 

Time Complexity: O(m+n)    Space Complexity: O(m)
class Solution {
    private int[] buildlps(String pat, int m){
        int [] lps = new int [m];
        int len =0;   // length of the previous longest prefix suffix 
        int i=1; 
        lps[0]=0;   // lps[0] is always 0
        
        while(i<m){
            if(pat.charAt(i)==pat.charAt(len)){
                len++;
                lps[i]=len;
                i++;
            }
            else{
                if(len!=0){
                    len=lps[len-1];
                }
                else{
                    lps[i]=0;
                    i++;
                }
            }
        }
        return lps;
    }

    ArrayList<Integer> search(String pat, String txt) {
        // your code here
        ArrayList<Integer> result = new ArrayList<>();
        
        int m=pat.length();
        int n=txt.length();
        //Step 1 L Build the LPS array
        int [] lps = buildlps(pat,m);
        // Step 2 : Pattern Matching 
        int i=0; //index for txt 
        int j=0; //index for pat
        
        while(i<n){
            if(pat.charAt(j)==txt.charAt(i)){
                i++;
                j++;
            }
            if(j==m){
                // pattern found 
                result.add(i-j);
                j=lps[j-1]; //reset j using lps 
            }
            else if(i<n && pat.charAt(j)!=txt.charAt(i)){
                //mismatch after  j matches
                if(j!=0){
                    j=lps[j-1];
                }
                else{
                    i++;
                }
            }
        }
        return result;
        
    }
}


