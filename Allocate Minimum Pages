#Allocate Minimum Pages
You are given an array arr[] of integers, where each element arr[i] represents the number of pages in the ith book. You also have an integer k representing the number of students. 
The task is to allocate books to each student such that:
Each student receives atleast one book.
Each student is assigned a contiguous sequence of books.
No book is assigned to more than one student.
The objective is to minimize the maximum number of pages assigned to any student. In other words, out of all possible allocations, find the arrangement where the student who receives the most pages still has the smallest possible maximum.

Note: Return -1 if a valid assignment is not possible, and allotment should be in contiguous order (see the explanation for better understanding).

Examples:

Input: arr[] = [12, 34, 67, 90], k = 2
Output: 113
Explanation: Allocation can be done in following ways:
[12] and [34, 67, 90] Maximum Pages = 191
[12, 34] and [67, 90] Maximum Pages = 157
[12, 34, 67] and [90] Maximum Pages = 113.
Therefore, the minimum of these cases is 113, which is selected as the output.

TC:O(nlogm) SC:O(1)

class Solution {
    
    // the maximum number of pages assigned to a student does not exceed 'mid'.
    static boolean isPossible(int[] arr,int  k,int  mid){
        int sum=0, student=1;
        for(int x:arr){
            sum+=x;    // Add the current book's pages to the current student's total.
      // If the current sum exceeds the limit 'mid', allocate to a new student.
            if(sum>mid){
                student++;
                sum=x;  // Start the new student with the current book's pages.
            }
        }
        return student<=k;
    }
    public static int findPages(int[] arr, int k) {
        // code here
        if(k>arr.length) return -1;
        int sum=0, max=Integer.MIN_VALUE;
        for(int x :arr){
            sum+=x;
            max = Math.max(max,x);
        }
        int low=max , high=sum , mid=0 , ans=Integer.MAX_VALUE;
        while(low<=high){
            mid=low+(high-mid)/2;
// Check if it is possible to allocate books with the current 'mid' as the limit.
            if(isPossible(arr,k,mid)){
      // If possible, try to minimize the maximum by reducing 'high'.
                high=mid-1;
                ans=Math.min(ans,mid);
            }
    // If not possible, increase 'low' to explore higher limits.
            else low=mid+1;
        }
        return ans;
    }
}
