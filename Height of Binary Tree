#Height of Binary Tree
Given a binary tree, find its height.

The height of a tree is defined as the number of edges on the longest path from the root to a leaf node. A leaf node is a node that does not have any children.


************************************************************** DFS *******************************************************
TC:O(n) SC:O(h) 
class Solution {
    // Function to find the height of a binary tree.
    int height(Node node) {
        // code here
        if(node==null) return -1;
        //recursively find the height of left and right subtrees 
        int leftHeight=height(node.left);
        int rightHeight=height(node.right);
        
        return 1+Math.max(leftHeight,rightHeight);
    }
}

************************************************************** BFS *******************************************************
TC:O(n) SC:O(n) 
import java.util.LinkedList;
import java.util.Queue;

class Solution {
    // Function to find the height of a binary tree using BFS (iterative approach)
    int height(Node node) {
        if (node == null) return -1; // Return -1 if tree is empty

        Queue<Node> queue = new LinkedList<>();
        queue.add(node);
        int height = -1;

        while (!queue.isEmpty()) {
            int levelSize = queue.size(); // Number of nodes in the current level
            height++; // Increment height for each level

            for (int i = 0; i < levelSize; i++) {
                Node curr = queue.poll(); // Remove the front node

                // Add children to the queue
                if (curr.left != null) queue.add(curr.left);
                if (curr.right != null) queue.add(curr.right);
            }
        }

        return height; // Return the height after processing all levels
    }
}
