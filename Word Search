#Word Search
You are given a two-dimensional mat[][] of size n*m containing English alphabets and a string word. Check if the word exists on the mat. The word can be constructed by using letters from adjacent cells, either horizontally or vertically. The same cell cannot be used more than once.

Examples :

Input: mat[][] = [['T', 'E', 'E'], ['S', 'G', 'K'], ['T', 'E', 'L']], word = "GEEK"
Output: true
Explanation:

The letter cells which are used to construct the "GEEK" are colored.
TC:O(nxmx4^L)
SC:O(L)

class Solution {
    static public boolean isWordExist(char[][] mat, String word) {
        // Code here
        int n =mat.length, m =mat[0].length;
        char firstChar=word.charAt(0);
        
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(mat[i][j]==firstChar && dfs(mat,word,i,j,0,n,m)){
                    return true;
                }
            }
        }
        return false;
    }
    private static boolean dfs(char[][]mat,String word, int i, int j,int index,int n , int m){
        if(index==word.length()){
            return true;
        }
        if(i<0 || i>=n || j<0 || j>=m || mat[i][j] != word.charAt(index)){
            return false;
        }
        //mark the cell visited 
        char temp=mat[i][j];
        mat[i][j]='#';  // any valid character to prevent revisiting 
        //move in 4 direction 
        boolean found=dfs(mat,word,i+1,j,index+1,n,m) || //down 
                      dfs(mat,word,i-1,j,index+1,n,m)|| //up
                      dfs(mat,word,i,j+1,index+1,n,m)|| //right
                      dfs(mat,word,i,j-1,index+1,n,m); //left
        //restore the cell (backtraking )
        mat[i][j]=temp;
        return found;
    }
}
