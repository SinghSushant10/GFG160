#Sum Pair closest to target
Given an array arr[] and a number target, find a pair of elements (a, b) in arr[], where a<=b whose sum is closest to target.
Note: Return the pair in sorted order and if there are multiple such pairs return the pair with maximum absolute difference. If no such pair exists return an empty array.
Examples:
Input: arr[] = [10, 30, 20, 5], target = 25
Output: [5, 20]
Explanation: As 5 + 20 = 25 is closest to 25.

TC:O(nlogn) SC:O(1)
class Solution {
    public List<Integer> sumClosest(int[] arr, int target) {
        // code here
        Arrays.sort(arr);
        int n = arr.length;
        int i=0 ,j=n-1, diff=Integer.MAX_VALUE,first=-1,second=-1;
        List<Integer>ans = new ArrayList<>();
        while(i<j){
            int sum=arr[i]+arr[j];
            if(diff>Math.abs(sum-target)|| ((diff==Math.abs(sum-target))&&arr[j]-arr[i]>second-first)){
                first=arr[i];
                second=arr[j];
                diff=Math.abs(sum-target);
            }
            if(sum<=target) i++;
            else j--;
        }
        if(first==-1 && second==-1) return ans;
        ans.add(first);
        ans.add(second);
        return ans;
    }
}
