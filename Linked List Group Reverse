#Linked List Group Reverse
Given the head a linked list, the task is to reverse every k node in the linked list. If the number of nodes is not a multiple of k then the left-out nodes in the end, should be considered as a group and must be reversed.

Examples:

Input: head = 1 -> 2 -> 2 -> 4 -> 5 -> 6 -> 7 -> 8, k = 4
Output: 4 -> 2 -> 2 -> 1 -> 8 -> 7 -> 6 -> 5

Time Complexity: O(n)    Space: O(1)

class Solution {
    public static Node reverseKGroup(Node head, int k) {
        // code here
        if(head==null) return head;
        Node current=head,prev=null,next=null;
        int count=0;
       //reverse the first k nodes 
       while(current!=null && count<k){
           next=current.next;
           current.next=prev;
           prev=current;
           current=next;
           count++;
       }
       //recursively reverse the remaining nodes 
       if(next!=null){
           head.next=reverseKGroup(next,k);
       }
       return prev;
    }
}
