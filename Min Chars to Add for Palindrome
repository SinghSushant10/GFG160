#Given a string s, the task is to find the minimum characters to be added at the front to make the string palindrome.
Note: A palindrome string is a sequence of characters that reads the same forward and backward.
Examples:
Input: s = "abc"
Output: 2
Explanation: Add 'b' and 'c' at front of above string to make it palindrome : "cbabc"


TC:O(n) SC:O(n)
class Solution {
    public static int minChar(String s) {
        // Write your code here
        //Reverese the String 
        String rev = new StringBuilder(s).reverse().toString();
        
        //Combine the original string a sperator and the reversed string 
        String combine = s+"$"+rev;
        int n = combine.length();
        // Create LPS (longest Prefix Suffix ) array 
        int [] lps = new int [n];
        int len=0;
        int i=1;
        while(i<n){
            if(combine.charAt(i)==combine.charAt(len)){
                lps[i++] = ++len;
            }
            else if(len!=0){
                len=lps[len-1];
            }
            else{
                lps[i++]=0;
            }
        }
        return s.length()-len;
    }
}
