#You are given two strings of equal lengths, s1 and s2. The task is to check if s2 is a rotated version of the string s1.
Note: The characters in the strings are in lowercase.
Examples :
Input: s1 = "abcd", s2 = "cdab"
Output: true
Explanation: After 2 right rotations, s1 will become equal to s2.

TC:O(n) SC: O(n)



class Solution {
    // Function to check if two strings are rotations of each other or not.
    public static boolean areRotations(String s1, String s2) {
        // Your code here
        StringBuilder temp = new StringBuilder(s2);
        temp.append('$').append(s1).append(s1);
        int n = temp.length() , i=0,j=1, m=s2.length();
        
        int lps[] = new int[n];
        Arrays.fill(lps,0);
        String str = temp.toString();
        while(j<n){
        // Increment 'i' and assign it to lps[j].
            if(str.charAt(i)==str.charAt(j)){
                lps[j++]=++i;
    
        // If the length of the matched prefix equals the pattern length, return true.
                if(i==m) return true ;
            }
         // If characters do not match and 'i' is not at the start of the pattern.
            else if(i!=0){
             i=lps[i-1];       // Backtrack 'i' to the previous LPS value.
            } 
          // If characters do not match and 'i' is at the start, move 'j' forward.
            else j++;
        }
        return false;
    }
}
