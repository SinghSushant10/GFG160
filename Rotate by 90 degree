#Rotate by 90 degree
Given a square matrix mat[][] of size n x n. The task is to rotate it by 90 degrees in an anti-clockwise direction without using any extra space. 
Examples:
Input: mat[][] = [[1, 2, 3],
                [4, 5, 6]
                [7, 8, 9]]
Output: Rotated Matrix:
[3, 6, 9]
[2, 5, 8]
[1, 4, 7]

TC: O(n*2) SC : O(1)

class Solution {
    // Function to rotate matrix anticlockwise by 90 degrees.
    static void rotateby90(int mat[][]) {
        // code here
            int n = mat.length;

    // Combine transpose and reverse steps to reduce iterations
    for (int i = 0; i < n; i++) {
        for (int j = i; j < n; j++) {
            // Transpose in place: swap mat[i][j] with mat[j][i]
            int temp = mat[i][j];
            mat[i][j] = mat[j][i];
            mat[j][i] = temp;
        }
    }

    // Reverse the columns directly
    for (int j = 0; j < n; j++) {
        int start = 0, end = n - 1;
        while (start < end) {
            // Swap mat[start][j] and mat[end][j] directly
            int temp = mat[start][j];
            mat[start][j] = mat[end][j];
            mat[end][j] = temp;
            start++;
            end--;
        }
    }
   
    }
}
