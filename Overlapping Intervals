#Overlapping Intervals
Given an array of Intervals arr[][], where arr[i] = [starti, endi]. The task is to merge all of the overlapping Intervals.

Examples:

Input: arr[][] = [[1,3],[2,4],[6,8],[9,10]]
Output: [[1,4], [6,8], [9,10]]
Explanation: In the given intervals we have only two overlapping intervals here, [1,3] and [2,4] which on merging will become [1,4]. Therefore we will return [[1,4], [6,8], [9,10]].

TC:O(nlongn) SC: O(n)

class Solution {
    public List<int[]> mergeOverlap(int[][] arr) {
        
        //sort intervals by their start time 
        Arrays.sort(arr,(a,b)-> Integer.compare(a[0],b[0]));
        
        List<int[]> merged = new ArrayList<>();
        merged.add(arr[0]);
        
        for(int i=1;i<arr.length;i++){
            // get the last interval in the merged list 
            int[] lastInterval = merged.get(merged.size()-1);
            //check if there is an overlap 
            if(lastInterval[1] >= arr[i][0]){
                //merge the intervals by updating the end time 
                lastInterval[1]= Math.max(lastInterval[1], arr[i][1]);
            }else{
                //no overlap , add the current interval to the result 
                merged.add(arr[i]);
            }
        }
        return merged; 
        
    }
}
